def count_palindromic_substrings(s):
    # Модифицируем строку для удобства обработки четных и нечетных палиндромов
    t = "#" + "#".join(s) + "#"
    n = len(t)
    p = [0] * n  # Массив для хранения максимальных радиусов палиндромов
    c = 0  # Центр текущего палиндрома
    r = 0  # Правый край текущего палиндрома
    result = 0  # Счетчик палиндромных подстрок
    
    for i in range(n):
        # Отражение относительно центра
        mirror = 2 * c - i
        
        if i < r:
            p[i] = min(r - i, p[mirror])  # Мы не можем расширяться за правый край
        
        # Расширяем палиндром вокруг i
        while i + p[i] + 1 < n and i - p[i] - 1 >= 0 and t[i + p[i] + 1] == t[i - p[i] - 1]:
            p[i] += 1
        
        # Обновляем центр и правый край
        if i + p[i] > r:
            c = i
            r = i + p[i]
        
        # Каждое увеличение p[i] дает количество новых палиндромов
        result += (p[i] + 1) // 2
    
    return result

def main():
    # Читаем строку
    s = input().strip()
    
    # Выводим результат
    print(count_palindromic_substrings(s))

if __name__ == "__main__":
    main()

